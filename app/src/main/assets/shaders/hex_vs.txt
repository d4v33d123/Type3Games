//vertex shader
//transform vertex to homogeneous space

//input constants
uniform lowp float range;
uniform lowp float weight;
uniform mat4 finalM;
uniform bool Avaliable;

//input variables
attribute vec4 aPosition;

//output variables
varying lowp vec4 vColour;

void main()
{
	//transform position with world view and projection matrices
	gl_Position = finalM * aPosition;

    lowp vec4 neutralColour = vec4(1.0, 1.0, 1.0, 0.1); // light grey
    lowp vec4 midColour = vec4(0.1, 0.3, 0.4, 0.7); // dark blueish
    lowp vec4 highlightColour = vec4(1.0, 0.0, 0.0, 1.0); // red
	lowp vec4 highlightColour2 = vec4(1.0, 1.0, 0.0, 1.0); // yellow?

	//pass on unchanged colour
	if(Avaliable)
	{
		vColour = mix(highlightColour2, neutralColour, weight);
	}
	else
	{
		//out of bv range
		if(range == 2.0)
			vColour = neutralColour;
		//in bv large range
		else if(range == 1.0)
			vColour = mix(midColour, neutralColour, weight);
		//in bv range
		else
			vColour = mix(highlightColour, midColour, weight);
	}
    
}